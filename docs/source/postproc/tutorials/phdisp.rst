phdisp tutorial
==============

In this section, we describe how to use Perturbopy to process a Perturbo ``phdisp`` calculation. 

The Perturbo ``phdisp`` calculation interpolates the phonon dispersion by Fourier transforming real-space interatomic force constants. The first step is to run Perturbo with ``calc_mode`` = ``'phdisp'``. More details can be found on the `Perturbo website <https://perturbo-code.github.io/mydoc_interpolation.html#phonon-dispersioncalc_mode--phdisp>`_. The YAML file used in this tutorial can be generated by following the Perturbo tutorial. The input files for this tutorial can be found `here <https://caltech.app.box.com/s/dxtieunoz2rgdns08os6vmtsxckmytrz/folder/101106240180>`_.

As described in the :ref:tutorials_intro we start by creating a :py:class:`.phdispCalcMode` object ``si_phdisp`` to store all the information from the YAML file.

.. code-block :: python

	import perturbopy.postproc as ppy

	si_phdisp = ppy.phdispCalcMode.from_yaml('si_phdisp.yml')

The rest of this section is organized as follows. :ref:`First <Accessing the data>`, we explain how the data can be accessed from ``si_phdisp``. :ref:`Then <Calculations>`, we explain how to perform calculations such as computing the direct bandgap, indirect bandgap, and effective mass. :ref:`Finally <Plotting the band structure>`, we explain how to plot the phdisp. 


Accessing the data
~~~~~~~~~~~~~~~~~~

Here, we describe how to access the data that is specific to the ``phdisp`` calculation, which are the k-points and the interpolated band energies. Please see the :doc:tutorials.rst page for more information on accessing data general to all calculation modes, such as input parameters and material properties.

The outputs of the calculation are stored in two the ``kpts`` attribute and ``phdisp`` attribute, described in more detail below.

K-points
--------

The k-points used for the phdisp calculation are stored in the :py:attr:`.phdispCalcMode.kpt` attribute, which is of type :py:class:`.RecipPtDB`. For example, to access the k-point coordinates and their units:

.. code-block :: python
	
	si_phdisp.kpt.points[:, 0]

	>> array([0.5, 0.5, 0.5])

	si_phdisp.kpt.units

	>> 'crystal'

Please see the section :ref:`handling_kpt_qpt` for details on accessing the k-points through this attribute.

Band energies
-------------

The interpolated band energies computed by the phdisp calculation are stored in the :py:attr:`.phdispCalcMode.phdisp` attribute, which is a :py:class:`.UnitsDict` object. The keys represent the band index, and the values are arrays containing the band energies corresponding to each k-point. 

.. code-block :: python

	si_phdisp.phdisp.keys()
	>> dict_keys([1, 2, 3, 4, 5, 6, 7, 8])

	si_phdisp.phdisp[8]
	>> array([13.69848506, 13.70154719, ..., 9.47676028, 9.46081004])

Please see the section :ref:`physical_quantities` for details on accessing the phdisp and their units.


Plotting the phonon dispersion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can plot the phonon dispersion quickly using Perturbopy:

.. code-block :: python

	import perturbopy.postproc as ppy
	import matplotlib.pyplot as plt

	fig, ax  = plt.subplots()

	si_phdisp = ppy.PhdispCalcMode.from_yaml('si_phdisp.yml')

	si_phdisp.plot_phdisp(ax)

For a nicer plot, we can use the ``plotparams`` dictionary provided in the ``plot_tools`` module. We can also add k-point labels (link to the k-point section) so that these are automatically added to the plot. 

.. code-block :: python

	import perturbopy.postproc as ppy
	import matplotlib.pyplot as plt

	fig, ax  = plt.subplots()
	plt.rcParams.update(ppy.plot_tools.plotparams)

	si_phdisp = ppy.PhdispCalcMode.from_yaml('si_phdisp.yml')
	si_phdisp.qpt.add_labels(ppy.plot_tools.points_fcc)

	si_phdisp.plot_phdisp(ax)

** check it **

.. image:: figures/silicon_phdisp.png
	:width: 450
	:align: center

For options including changing the energy window or changing the linestyles/colors, please refer to the analogous section plotting the bands, :ref:plot_bands.