Getting started
===============

The general workflow is

1. Perturbo calculation
-----------------------

All Perturbo calculations output a YAML file (default name "pert_output.yml"). This YAML file contains: (reference Perturbo website)

* inputs to the calculation
* information about the material, from the "basic data" group of the epwan file
* outputs from the calculation

We will use this YAML file to export the data to Python with PerturboPy.

(for dynamics runs, also need hdf5 file - describe later)

2. Exporting data
-----------------

The first step is to create an object containing the data. This is easily created from the YAML file outputted by the Perturbo calculation. Here we create an instance of the ``CalcMode`` class, which is the parent class to other classes such as ``BandsCalcMode``, ``PhdsipCalcMode``, ``ImsigmaCalcMode``, etc. The explanations described here apply to each calculation mode, and we use .

Provide more details
- go to perturbo tutorials, see example 1, describe silicon system and link 
- then we run bands (link to input file)
- take yaml file, which we will now postprocess

.. code-block :: python

	import perturbopy.postproc as ppy

	gaas_bands = ppy.BandsCalcMode.from_yaml("gaas_bands.yml")

The ``gaas_bands`` object contains inputs, outputs, and basic data from the calculation. 

Basic data is stored as instance variables. For example:

.. code-block :: python
	
	gaas_bands.alat
	
	>> 10.5
   
	gaas_bands.lat
	
	>> array([[-0.5,  0. , -0.5],
          [ 0. ,  0.5,  0.5],
          [ 0.5,  0.5,  0. ]])
   
	gaas_bands.lat_units
   
   >> 'alat'

Remaining data from the YAML file are stored in the _pert_dict attribute. For example, calculation inputs are stored in the _pert_dict['input parameters'] subdictionary.

.. code-block :: python

	gaas_bands._pert_dict['input parameters']['after conversion']['sampling']

    >> 'uniform'

Outputs from the calculation are stored by child classes in additional variables specific to the calculation mode. For further details, see the sections organized by calculation mode below.



Outputs from the calculation are stored by child classes in additional variables specific to the calculation mode. For further details, see the sections organized by calculation mode below.


More plotting
-------------

Here we describe additional tools to customize the plots. Plots are generated by:

1. Running the appropriate Perturbo calculation mode
2. Generating a CalcMode object using the outputted YAML file
3. Calling the 

A further, optional step to enhance the default plots is:

4. Use functions from the `plot_tools` module to add to plots