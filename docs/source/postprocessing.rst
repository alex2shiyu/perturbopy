Postprocessing
==============

.. contents::
   :depth: 3

In the Perturbopy postprocessing module, we provide tools to help postprocess the output of Perturbo calculations. The module allows users to:

* export data to Python
* perform simple calculations
* visualize data

In this section, we give tutorials to process each Perturbo calculation mode. We also provide tutorials to customize the default plots with additional plotting tools.

The YAML files used in these tutorials can be found in (INSERT PATH HERE)

Overview
--------

All Perturbo calculations output a YAML file (default name "pert_output.yml"). This YAML file contains:

* inputs to the calculation
* information about the material, from the "basic data" group of the epwan file
* outputs from the calculation

Overview
~~~~~~~~

The first step is to create an object containing the data. This is easily created from the YAML file outputted by the Perturbo calculation. Here we create an instance of the ``CalcMode`` class, which is the parent class to other classes such as ``BandsCalcMode``, ``PhdsipCalcMode``, ``ImsigmaCalcMode``, etc. The explanations described here apply to each calculation mode.

.. code-block :: python

	import perturbopy.postproc as ppy

	gaas_bands = ppy.CalcMode.from_yaml("gaas_bands.yml")

The ``gaas_bands`` object contains inputs, outputs, and basic data from the calculation. 

Basic data is stored as instance variables. For example:

.. code-block :: python
	
	gaas_bands.alat
	gaas_bands.lat
	gaas_bands.lat_units

.. program-output:: python
   
   10.5
   array([[-0.5,  0. , -0.5],
          [ 0. ,  0.5,  0.5],
          [ 0.5,  0.5,  0. ]])
   'alat'

Remaining data from the YAML file are stored in the _pert_dict attribute. For example, calculation inputs are stored in the _pert_dict['input parameters'] subdictionary.

.. code-block :: python
	
	gaas_bands._pert_dict['input parameters']['after conversion']['sampling']

.. program-output :: python -V
   
   'uniform'

Outputs from the calculation are stored by child classes in additional variables specific to the calculation mode. For further details, see the sections organized by calculation mode below.

Bands
-----

We first create a BandsCalcMode object to store the data. 

.. code-block :: python

	import perturbopy.postproc as ppy

	gaas_bands = ppy.BandsCalcMode.from_yaml("gaas_bands.yml")

Basic data and inputs to the calculation are stored and accessed as described in the "Overview" section.

Each BandsCalcMode object has two additional attributes to store the outputs from the calculation. 

describe self.kpts and self.bands.


Simple Calculations
~~~~~~~~~~~~~~~~~~~

Direct bandgap

Indirect bandgap

Effective mass

Data visualization
~~~~~~~~~~~~~~~~~~


More plotting
-------------

Here we describe additional tools to customize the plots. Plots are generated by:

1. Running the appropriate Perturbo calculation mode
2. Generating a CalcMode object using the outputted YAML file
3. Calling the 

A further, optional step to enhance the default plots is:

4. Use functions from the `plot_tools` module to add to plots