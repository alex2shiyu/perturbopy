import os
from perturbopy.io_utils.io import open_yaml
import numpy as np


class CalcMode():
   """
   This is a class representation of a general Perturbo calculation mode.

   Parameters
   ----------
   pert_dict : dict
      dictionary containing inputs and outputs from a Perturbo calculation

   """

   def __init__(self, pert_dict):
      """
      Constructor method

      """

      self.calc_mode = pert_dict['input parameters']['after conversion'].pop('calc_mode')

      self.alat = pert_dict['basic data']['alat']
      self.alat_units = pert_dict['basic data']['alat units']
      self.lat = pert_dict['basic data']['lattice vectors']
      self.lat_units = pert_dict['basic data']['lattice vectors units']
      self.recip_lat = pert_dict['basic data']['reciprocal lattice vectors']
      self.recip_lat_units = pert_dict['basic data']['reciprocal lattice vectors units']
      self.nat = pert_dict['basic data']['num atoms in unit cell']
      self.atomic_pos_units = pert_dict['basic data']['atomic positions units']
      self.volume = pert_dict['basic data']['volume']
      self.volume_units = pert_dict['basic data']['volume units']
      self._pert_dict = pert_dict
     
   @classmethod
   def from_yaml(cls, yaml_path='pert_output.yml'):
      """
      Class method to create a CalcMode object from the yaml file
      generated by a Perturbo calculation.

      Parameters
      ----------
      yaml_path : str
         Path to the yaml file generated by a calculation

      Returns
      -------
      CalcMode
         The CalcMode object generated from the yaml file

      """
     
      if not os.path.isfile(yaml_path):
         raise FileNotFoundError(f'File {yaml_path} not found')
     
      yaml_dict = open_yaml(yaml_path)

      return cls(yaml_dict)

   def cryst_to_cart(self, vectors, forward=True, real_space=True, col_oriented=True):
      """
      Method to convert atomic coordinates and k-point coordinates
      between crystal and cartesian coordinates, given the lattice
      used in this calculation.

      Parameters
      ----------
      vectors : array
         Array of vectors [v1, v2, v3 ...] to be converted
      forward : bool
         If true, vectors will be converted from crystal to cartesian
         coordinates. If false, vectors will be converted from
         cartesian to crystal coordinates

      real_space : bool
         If true, vectors are assumed to be in real space
         (i.e. atomic positions). If false, vectors are assumed to
         be in reciprocal space (i.e. k-points)

      Returns
      -------
      converted_vectors : array
         Array containing the converted vectors

      """

      if forward:
         if real_space:
            conversion_mat = self.lat
         else:
            conversion_mat = self.recip_lat
      
      else:
         if real_space:
            conversion_mat = np.transpose(self.recip_lat)
         else:
            conversion_mat = np.transpose(self.lat)

      if not col_oriented:
         conversion_mat = np.transpose(conversion_mat)
         converted_vectors = np.tensordot(vectors, conversion_mat, axes=1)
      else:
         converted_vectors = np.tensordot(conversion_mat, vectors, axes=1)

      return converted_vectors
